type parameter =
|    ["CreateUser", string];

type document = {
  name: string,
  date: timestamp,
  content: string,
  authorByAddress: big_map<address, string>,
  authorByUsername: big_map<string, address>,
};

type post = {
  id: int,
  document: document,
  name: string,
  date: timestamp,
};

type storage = {
  userByUsername: big_map<string, address>,
  userByAddress: big_map<address, string>,
  posts: big_map<address, list<post>>,
};

// POSTS

// USER

const create_user = (_username: string, _storage: storage) : storage => {
  const owner = Tezos.get_sender();
  if (Big_map.mem((owner), _storage.userByAddress)) {
    failwith("Address is already taken.");
  }
  const newUserByAddress = Big_map.update(owner as address, Some(_username), _storage.userByAddress);
  const newUserByUsername = Big_map.update(_username, Some(owner), _storage.userByUsername);
  return {
    ..._storage,
    userByAddress: newUserByAddress,
    userByUsername: newUserByUsername,
  };
};

const main = ([action, storage]: [parameter, storage]) : [list<operation>, storage] => {
    let newStorage = match(action, {
        CreateUser: (username: string) => create_user(username, storage),
    });
    return [list([]) as list<operation>, newStorage];
};